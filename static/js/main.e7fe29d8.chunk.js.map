{"version":3,"sources":["Event.js","EventList.js","CitySearch.js","NumberOfEvents.js","App.js","serviceWorker.js","index.js"],"names":["Event","state","showHideFlag","events","id","name","yes_rsvp_count","detailsClicked","setState","group","urlname","who","localized_location","link","description","visibility","className","this","map","event","key","onClick","Component","EventList","CitySearch","query","suggestions","city","country","localized_country_name","name_string","zip","lat","lon","handleInputChanged","value","target","handleItemClicked","type","onChange","item","NumberOfEvents","displayCount","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uOA8DeA,E,2MA3DXC,MAAQ,CACJC,cAAc,EACdC,OAAQ,CACJ,CACIC,GAAI,YACJC,KAAM,0DACNC,eAAgB,K,EAK5BC,eAAiB,YACmB,IAA5B,EAAKN,MAAMC,aACX,EAAKM,SAAS,CACVN,cAAc,EACdC,OAAQ,CACJ,CACIC,GAAI,YACJC,KAAM,0DACNC,eAAgB,EAChBG,MAAO,CACHJ,KAAM,kCACNK,QAAS,kCACTC,IAAK,gBACLC,mBAAoB,oBAExBC,KAAM,2EACNC,YAAa,oEACbC,WAAY,aAKxB,EAAKP,SAAS,CACVN,cAAc,EACdC,OAAQ,CACJ,CACIC,GAAI,YACJC,KAAM,0DACNC,eAAgB,O,wEAO1B,IAAD,OACL,OACI,yBAAKU,UAAU,SACX,wBAAIA,UAAU,UACTC,KAAKhB,MAAME,OAAOe,KAAI,SAAAC,GAAK,OACxB,wBAAIC,IAAKD,EAAMf,IAAKe,EAAMd,SAE9B,4BAAQW,UAAU,UAAUK,QAAS,kBAAM,EAAKd,mBAAhD,iB,GAtDAe,aCoBLC,E,2MAjBXtB,MAAQ,CACJE,OAAQ,I,wEAIR,OACI,wBAAIa,UAAU,aACTC,KAAKhB,MAAME,OAAOe,KAAI,SAAAC,GAAK,OAC5B,wBAAIC,IAAKD,EAAMf,IACX,kBAAC,EAAD,CAAOe,MAAOA,a,GAXVG,aCyDTE,E,2MAxDXvB,MAAQ,CACJwB,MAAO,SACPC,YAAa,CACT,CACEC,KAAM,SACNC,QAAS,KACTC,uBAAwB,UACxBC,YAAa,kBACbC,IAAK,UACLC,IAAK,MACLC,IAAK,OAEP,CACEN,KAAM,SACNC,QAAS,KACTC,uBAAwB,MACxB5B,MAAO,KACP6B,YAAa,4BACbC,IAAK,QACLC,IAAK,MACLC,KAAM,S,EAKhBC,mBAAqB,SAACf,GAClB,IAAMgB,EAAQhB,EAAMiB,OAAOD,MAC3B,EAAK3B,SAAS,CAAEiB,MAAOU,K,EAG3BE,kBAAoB,SAACF,GACjB,EAAK3B,SAAS,CAAEiB,MAAOU,K,wEAGjB,IAAD,OACL,OACI,yBAAKnB,UAAU,cACX,2BACIsB,KAAK,OACLtB,UAAU,OACVmB,MAAOlB,KAAKhB,MAAMwB,MAClBc,SAAUtB,KAAKiB,qBAEnB,wBAAIlB,UAAU,eACTC,KAAKhB,MAAMyB,YAAYR,KAAI,SAAAsB,GAAI,OAC5B,wBAAIpB,IAAKoB,EAAKV,YACdT,QAAS,kBAAM,EAAKgB,kBAAkBG,EAAKV,eACtCU,EAAKV,sB,GAjDTR,aCyBVmB,E,2MAvBXxC,MAAQ,CACJyC,aAAc,I,EAGlBR,mBAAqB,SAACf,GAClB,IAAMgB,EAAQhB,EAAMiB,OAAOD,MAC3B,EAAK3B,SAAS,CAAEkC,aAAcP,K,wEAI9B,OACI,yBAAKnB,UAAU,kBACX,2BACIsB,KAAK,OACLtB,UAAU,SACVmB,MAAOlB,KAAKhB,MAAMyC,aAClBH,SAAUtB,KAAKiB,oBACVjB,KAAKyB,mB,GAnBDpB,aCgBdqB,MAXf,WACE,OACE,yBAAK3B,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCDc4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.e7fe29d8.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Event extends Component {\r\n    state = {\r\n        showHideFlag: false,\r\n        events: [\r\n            {\r\n                id: '267887413',\r\n                name: 'Lower Manhattan and Brooklyn Night Photography Workshop',\r\n                yes_rsvp_count: 1\r\n            }\r\n        ]\r\n    } \r\n\r\n    detailsClicked = () => {\r\n        if (this.state.showHideFlag === false ) {\r\n            this.setState({ \r\n                showHideFlag: true,\r\n                events: [\r\n                    {\r\n                        id: '267887413',\r\n                        name: 'Lower Manhattan and Brooklyn Night Photography Workshop',\r\n                        yes_rsvp_count: 1,\r\n                        group: {\r\n                            name: 'Philadelphia Travel Photography',\r\n                            urlname: 'Philadelphia-Travel-Photography',\r\n                            who: 'Photographers',\r\n                            localized_location: 'Philadelphia, PA',\r\n                        },\r\n                        link: 'https://www.meetup.com/Philadelphia-Travel-Photography/events/267887413/',\r\n                        description: '<p>Join for a fun afternoon and evening photography workshop.</p>',\r\n                        visibility: 'public',\r\n                    }\r\n                ]\r\n             });\r\n        } else {\r\n            this.setState({ \r\n                showHideFlag: false,\r\n                events: [\r\n                    {\r\n                        id: '267887413',\r\n                        name: 'Lower Manhattan and Brooklyn Night Photography Workshop',\r\n                        yes_rsvp_count: 1\r\n                    }\r\n                ]\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Event\">\r\n                <ul className=\"events\">\r\n                    {this.state.events.map(event => \r\n                        <li key={event.id}>{event.name}</li>\r\n                    )}\r\n                    <button className=\"details\" onClick={() => this.detailsClicked()}>Details</button>\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Event;","import React, { Component } from 'react';\r\nimport Event from './Event';\r\n\r\nclass EventList extends Component {\r\n    \r\n    state = {\r\n        events: [],\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <ul className=\"EventList\">\r\n                {this.state.events.map(event => \r\n                <li key={event.id}>\r\n                    <Event event={event} />\r\n                </li>\r\n                )}\r\n            </ul>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EventList;","import React, { Component } from 'react';\r\n\r\nclass CitySearch extends Component {\r\n\r\n    state = {\r\n        query: 'Munich',\r\n        suggestions: [\r\n            {\r\n              city: 'Munich',\r\n              country: 'de',\r\n              localized_country_name: 'Germany',\r\n              name_string: 'Munich, Germany',\r\n              zip: 'meetup3',\r\n              lat: 48.14,\r\n              lon: 11.58\r\n            },\r\n            {\r\n              city: 'Munich',\r\n              country: 'us',\r\n              localized_country_name: 'USA',\r\n              state: 'ND',\r\n              name_string: 'Munich, North Dakota, USA',\r\n              zip: '58352',\r\n              lat: 48.66,\r\n              lon: -98.85\r\n            }\r\n          ]\r\n    }\r\n\r\n    handleInputChanged = (event) => {\r\n        const value = event.target.value;\r\n        this.setState({ query: value });\r\n    }\r\n\r\n    handleItemClicked = (value) => {\r\n        this.setState({ query: value});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"CitySearch\">\r\n                <input\r\n                    type=\"text\"\r\n                    className=\"city\"\r\n                    value={this.state.query}\r\n                    onChange={this.handleInputChanged}\r\n                />\r\n                <ul className=\"suggestions\">\r\n                    {this.state.suggestions.map(item => \r\n                        <li key={item.name_string} \r\n                        onClick={() => this.handleItemClicked(item.name_string)}>\r\n                            {item.name_string}\r\n                        </li>\r\n                    )}\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CitySearch;","import React, { Component } from 'react';\r\n\r\nclass NumberOfEvents extends Component {\r\n\r\n    state = {\r\n        displayCount: 32\r\n    } \r\n\r\n    handleInputChanged = (event) => {\r\n        const value = event.target.value;\r\n        this.setState({ displayCount: value });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"NumberOfEvents\">\r\n                <input\r\n                    type=\"text\"\r\n                    className=\"number\"\r\n                    value={this.state.displayCount}\r\n                    onChange={this.handleInputChanged}>\r\n                        {this.displayCount}\r\n                </input>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default NumberOfEvents;","import React from 'react';\r\nimport './App.css';\r\nimport EventList from './EventList';\r\nimport CitySearch from './CitySearch';\r\nimport Event from './Event';\r\nimport NumberOfEvents from './NumberOfEvents';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <CitySearch />\r\n      <EventList />\r\n      <Event />\r\n      <NumberOfEvents />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}